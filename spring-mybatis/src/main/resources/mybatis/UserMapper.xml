<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- namespace表示命名空间，可以映射到接口中，id和方法名一致 -->
<mapper namespace="com.ebay.dao.UserDao">
	<!-- 可以在Configuration.xml中设置model的别名 -->
	<!--支持column和field映射 类型而定义的returnMap -->
	<resultMap type="User" id="Tuser">
		<id column="id" property="id" />
		<result column="name" property="name" />
		<result column="birth_year" property="birthYear" />
	</resultMap>

	<!-- resultType是model和column一一映射，如果不能对应则不能赋值，可以在Configuration.xml指定别名 -->
	<!-- resultMap是将column和field一一映射，用于解决column和field不一致的情况,在本sqlmap.xml中配置即可 -->
	<select id="getUser" parameterType="int" resultMap="Tuser"> <!-- resultType="User" -->
		select id,name,birth_year from e_user where id = #{id}
	</select>

	<!-- 返回list 的select 语句，注意 resultMap 的值是指向前面定义好的 -->
	<select id="getUserList" parameterType="string" resultMap="Tuser">
		select id,name,birth_year from e_user where name like #{name}
	</select>

	<!--执行增加操作的SQL语句。id和parameterType 分别与IUserOperation接口中的addUser方法的名字和 参数类型一致。以#{name}的形式引用Student参数 
		的name属性，MyBatis将使用反射读取Student参数 的此属性。#{name}中name大小写敏感。引用其他 的gender等属性与此一致。seGeneratedKeys设置 
		为"true"表明要MyBatis获取由数据库自动生成的主 键；keyProperty="id"指定把获取到的主键值注入 到Student的id属性 -->
	<!-- 增加后，必须提交事务，否则不会写入到数据库. -->
	<insert id="addUser" parameterType="User" useGeneratedKeys="true"
		keyProperty="id">
		insert into
		e_user(name,birth_year)
		values(#{name},#{birthYear})
	</insert>

	<update id="updateUser" parameterType="User">
		update e_user set
		name=#{name},birth_year=#{birthYear}
		where id=#{id}
	</update>

	<delete id="deleteUser" parameterType="int">
		delete from e_user where
		id=#{id}
	</delete>

	<!-- 传递多个参数 使用map -->
	<select id="getUserLimit" parameterType="java.util.Map"
		resultMap="Tuser">
		select id,name,birth_year from e_user where id > ${id} limit
		#{start},#{limit}
	</select>
</mapper>